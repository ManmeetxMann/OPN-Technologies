interface IDataModel<T extends HasId> {

    /**
     * Get a reference to a collection (NOT a CollectionReference) at the given path
     * @param subPath the path, after rootpath, to the collection
     */
    collection(subPath): Collection<T>
  
    /**
     * Resets the collection
     */
    initialize(): Promise<unknown>
  
    /**
     * Adds data to the collection
     * @param data Data to add - id does not need to be present.
     * @param subPath path to the subcollection where we add data. rootPath if left blank
     */
    add(data: OptionalIdStorable<T>, subPath?: string): Promise<T>
  
    addAll(data: Array<OptionalIdStorable<T>>, subPath?: string): Promise<T[]>
  
    updateProperty(id: string, fieldName: string, fieldValue: unknown, subPath?: string): Promise<T>
  
    /**
     * Updates fields in a document
     * @param id identifier for the document in the collection
     * @param fields field name as key and field value as value
     */
    updateProperties(id: string, fields: Record<string, unknown>, subPath?: string): Promise<T>
  
    /**
     * Updates data in the collection
     * @param data Data to update â€“ id property must be present
     * @param subPath path to the subcollection the data is found. rootPath if left blank
     */
    update(data: Storable<T>, subPath?: string): Promise<T>
  
    updateAll(data: Array<Storable<T>>, subPath?: string): Promise<T[]>
  
    fetchAll(subPath?: string): Promise<T[]>
  
    /**
     * Increments the given property of the specified document by the count given
     * @param id identifier for the document in the collection
     * @param fieldName field / property name to increment
     * @param byCount how much to increment
     */
    increment(id: string, fieldName: string, byCount: number, subPath?: string): Promise<T>
  
    findWhereArrayInMapContainsAny(
      map: string,
      key: string,
      value: unknown,
      subPath?: string,
    ): Promise<T[]>
  
    findWhereArrayInMapContains(
      map: string,
      key: string,
      value: unknown,
      subPath?: string,
    ): Promise<T[]>
  
    findWhereArrayContains(property: string, value: unknown, subPath?: string): Promise<T[]>
  
    findWhereArrayContainsAny(
      property: string,
      values: Iterable<unknown>,
      subPath?: string,
      identity?: (element: T) => unknown,
    ): Promise<T[]>
  
    findWhereIdIn(values: unknown[], subPath?: string): Promise<T[]>
  
    findOneById(value: unknown, subPath?: string): Promise<T>
  
    findWhereMapHasKeyValueIn(
      map: string,
      key: string,
      value: unknown,
      subPath?: string,
    ): Promise<T[]>
  
    findWhereIn(
      property: string,
      values: Iterable<unknown>,
      subPath?: string,
      identity?: (element: T) => unknown,
    ): Promise<T[]>
  
    get(id: string, subPath?: string): Promise<T>
  
    findWhereEqual(property: string, value: unknown, subPath?: string): Promise<T[]>
  
    findWhereEqualWithMax(
      property: string,
      value: unknown,
      sortKey: Exclude<keyof T, 'id'>,
      subPath?: string,
    ): Promise<T[]>
  
    findWhereArrayContainsWithMax(
      property: string,
      value: unknown,
      sortKey: Exclude<keyof T, 'id'>,
      subPath?: string,
    ): Promise<T[]>
  
    findWhereEqualInMap(
      fields: DataModelFieldMap[],
      order?: DataModelOrdering,
      subPath?: string,
    ): Promise<T[]>
  
    delete(id: string, subPath?: string): Promise<void>
  
    count(subPath?: string): Promise<number>
  }