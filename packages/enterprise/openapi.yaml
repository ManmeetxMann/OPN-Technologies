openapi: 3.0.1
info:
  title: Enterprise API
  version: 1.0.0
components:
  securitySchemes:
    bearerAuthJWT:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Response:
      type: object
      properties:
        data:
          nullable: true
          type: object
        status:
          type: object
          properties:
            code:
              type: string
              enum:
                [
                  succeed,
                  failed,
                  validation_error,
                  internal_server_error,
                  unauthorized,
                  access_denied,
                  resource_not_found,
                ]
            message:
              nullable: true
              type: string

    Organization:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        logoUrl:
          type: string
        type:
          type: string
          enum:
            - default
            - childcare
        allowDependants:
          type: boolean
      required:
        - name

    OrganizationLocation:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        address:
          type: string
        city:
          type: string
        state:
          type: string
        zip:
          type: string
        country:
          type: string
        attestationRequired:
          type: boolean
        allowAccess:
          type: boolean
        questionnaireId:
          type: string
          nullable: true
        allowsSelfCheckInOut:
          type: boolean
        zones:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              title:
                type: string
              address:
                type: string
              attestationRequired:
                type: boolean
              questionnaireId:
                type: string
              allowsSelfCheckInOut:
                type: boolean
      required:
        - title
        - attestationRequired

    OrganizationGroup:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        checkInDisabled:
          type: boolean
        priority:
          type: number
      required:
        - name

    OrganizationConnectionRequest:
      type: object
      properties:
        organizationId:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        base64Photo:
          type: string
        groupId:
          type: string
        responses:
          type: array
          items:
            type: string
      required:
        - organizationId
        - groupId
        - firstName
        - lastName
        - base64Photo

    OrganizationUsersGroupMoveData:
      type: object
      properties:
        userId:
          type: string
        newGroupId:
          type: string
        oldGroupId:
          type: string
        parentUserId:
          type: string
      required:
        - userId
        - newGroupId
        - oldGroupId

    OrganizationUsersGroupMoveOperationRequest:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationUsersGroupMoveData'
          description: Location Ids within Organization
        dryRun:
          type: boolean
      required:
        - data
        - dryRun

    AuthLinkRequestRequest:
      type: object
      properties:
        email:
          type: string
      required:
        - email

    AuthLinkProcessRequest:
      type: object
      properties:
        idToken:
          type: string
          description: Id Token from Firebase Auth
        connectedId:
          type: string
          description: Your connected user Id
      required:
        - idToken
        - connectedId

    InternalAdminApprovalCreateRequest:
      type: object
      properties:
        email:
          type: string
          description: Email for admin
        organizationId:
          type: string
          description: Organization Id to become an admin of. Must be provided.
        locationIds:
          type: array
          items:
            type: string
          description: Location Ids within Organization
        superAdminForOrganizationIds:
          type: array
          items:
            type: string
          description: Organizaiton ids to become a super admin of. Must be provided can be empty.
        healthAdminForOrganizationIds:
          type: array
          items:
            type: string
          description: Organizaiton ids to become a health admin of. Must be provided can be empty.
        groupIds:
          type: array
          items:
            type: string
          description: Group Ids within Organization
        showReporting:
          type: boolean
          description: Show reporting feature
      required:
        - email
        - showReporting
        - organizationId
        - superAdminForOrganizationIds

    InternalAdminListRequest:
      type: object
      properties:
        organizationId:
          type: string
          description: Organization Id
        scope:
          type: string
          description: Look at admin approvals or users admin profiles
          enum: [approval,user]
      required:
        - organizationId
        - scope

    AdminProfile:
      type: object
      properties:
        email:
          type: string
        enabled:
          type: boolean
        adminForGroupIds:
          type: array
          items:
            type: string
        adminForLocationIds:
          type: array
          items:
            type: string
        superAdminForOrganizationIds:
          type: array
          items:
            type: string
        adminForOrganizationId:
          type: string
        showReporting:
          type: boolean

    User:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        base64Photo:
          type: string
        organizationIds:
          type: array
          nullable: true
          items:
            type: string
      required:
        - firstName
        - lastName
        - base64Photo

    UserEdit:
      type: object
      properties:
        parentUserId:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        base64Photo:
          type: string
        # groupId:
        #   type: string
      required:
        - firstName
        - lastName

    Access:
      type: object
      properties:
        token:
          type: string
        userId:
          type: string
        statusToken:
          type: string
        locationId:
          type: string
        createdAt:
          type: string
        enteredAt:
          type: string
          nullable: true
        exitAt:
          type: string
          nullable: true
        includesGuardian:
          type: boolean
        dependants:
          type: object
          additionalProperties:
            type: object
            properties:
              id:
                type: string
              enteredAt:
                type: string
                nullable: true
              exitAt:
                type: string
                nullable: true

    ResponseOfOrganizationConnection:
      type: object
      properties:
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            organization:
              $ref: '#/components/schemas/Organization'
            group:
              $ref: '#/components/schemas/OrganizationGroup'
        status:
          type: object
          properties:
            code:
              type: string
              enum:
                [
                  succeed,
                  failed,
                  validation_error,
                  internal_server_error,
                  unauthorized,
                  access_denied,
                  resource_not_found,
                ]
            message:
              nullable: true
              type: string

    ResponseOfOrganization:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Organization'
        status:
          type: object
          properties:
            code:
              type: string
              enum:
                [
                  succeed,
                  failed,
                  validation_error,
                  internal_server_error,
                  unauthorized,
                  access_denied,
                  resource_not_found,
                ]
            message:
              nullable: true
              type: string

    ResponseOfOrganizationLocations:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationLocation'
        status:
          type: object
          properties:
            code:
              type: string
              enum:
                [
                  succeed,
                  failed,
                  validation_error,
                  internal_server_error,
                  unauthorized,
                  access_denied,
                  resource_not_found,
                ]
            message:
              nullable: true
              type: string

    ResponseOfOrganizationLocation:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/OrganizationLocation'
        status:
          type: object
          properties:
            code:
              type: string
              enum:
                [
                  succeed,
                  failed,
                  validation_error,
                  internal_server_error,
                  unauthorized,
                  access_denied,
                  resource_not_found,
                ]
            message:
              nullable: true
              type: string

    ResponseOfOrganizations:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Organization'
        status:
          type: object
          properties:
            code:
              type: string
              enum:
                [
                  succeed,
                  failed,
                  validation_error,
                  internal_server_error,
                  unauthorized,
                  access_denied,
                  resource_not_found,
                ]
            message:
              nullable: true
              type: string

    ResponseOfOrganizationGroups:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationGroup'
        status:
          type: object
          properties:
            code:
              type: string
              enum:
                [
                  succeed,
                  failed,
                  validation_error,
                  internal_server_error,
                  unauthorized,
                  access_denied,
                  resource_not_found,
                ]
            message:
              nullable: true
              type: string

    ResponseOfOrganizationGroup:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/OrganizationGroup'
        status:
          type: object
          properties:
            code:
              type: string
              enum:
                [
                  succeed,
                  failed,
                  validation_error,
                  internal_server_error,
                  unauthorized,
                  access_denied,
                  resource_not_found,
                ]
            message:
              nullable: true
              type: string

    ResponseOfOrganizationStats:
      type: object
      properties:
        data:
          type: object
          properties:
            asOfDateTime:
              type: string
              description: The ISO date-time when the stats have been computed
              example: "2020-09-01T23:17:07.657Z"
            accesses:
              type: array
              items:
                type: object
                allOf:
                  - $ref: '#/components/schemas/Access'
                  - type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      status:
                        type: string
                        enum: [pending,proceed,caution,stop]

            passportsCountByStatus:
              type: object
              description: Total badge count per status
              properties:
                pending:
                  type: number
                proceed:
                  type: number
                caution:
                  type: number
                stop:
                  type: number
              example:
                pending: 1
                proceed: 1
                caution: 0
                stop: 0
            hourlyCheckInsCounts:
              type: array
              items:
                type: object
                properties:
                  date:
                    type: string
                  count:
                    type: number
                example: [{"date": "2020-09-01T13:00:00.000Z","count": 1},{"date": "2020-09-01T17:00:00.000Z","count": 1}]

        status:
          type: object
          properties:
            code:
              type: string
              enum:
                [
                  succeed,
                  failed,
                  validation_error,
                  internal_server_error,
                  unauthorized,
                  access_denied,
                  resource_not_found,
                ]
            message:
              nullable: true
              type: string

    ResponseOfAdminProfile:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AdminProfile'
        status:
          type: object
          properties:
            code:
              type: string
              enum:
                [
                  succeed,
                  failed,
                  validation_error,
                  internal_server_error,
                  unauthorized,
                  access_denied,
                  resource_not_found,
                ]
            message:
              nullable: true
              type: string

  responses:
    Response:
      description: Default Response wrapper
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'

paths:
  /organizations:
    post:
      description: Create new organization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
      responses:
        '200':
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfOrganization'

  /organizations/one:
    get:
      description: Find one organization by key
      parameters:
        - in: query
          name: key
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfOrganization'

  /organizations/{organizationId}/scheduling:
    post:
      description: Update an organization's mailing schedule
      parameters:
        - in: path
          name: organizationId
          schema:
            type: string
          # required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                forYesterday:
                  type: boolean
                  description: true if the report is for the day before it is sent
                hourToSendReport:
                  type: number
                  description: hour of the day to send the report (null to disable reporting)
                  nullable: true
      responses:
        '200':
          description: Successfully added
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseOfOrganizationLocations'

  /organizations/{organizationId}/locations:
    post:
      description: Add locations to an organization
      parameters:
        - in: path
          name: organizationId
          schema:
            type: string
#          required: true
        - in: query
          name: parentLocationId
          schema:
            type: string
          description: The parent of the locations (if there is one)
          required: false
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/OrganizationLocation'
      responses:
        '200':
          description: Successfully added
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseOfOrganizationLocations'
    put:
      description: Update locations
      parameters:
        - in: path
          name: organizationId
          schema:
            type: string
        #          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/OrganizationLocation'
      responses:
        '200':
          description: Successfully updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseOfOrganizationLocations'
    get:
      description: Get organization locations
      parameters:
        - in: query
          name: parentLocationId
          schema:
            type: string
          description: The parent of the locations (if there is one)
          required: false
        - in: path
          name: organizationId
          schema:
            type: string
#          required: false
      responses:
        '200':
          description: Successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseOfOrganizationLocations'

  /organizations/{organizationId}/locations/{locationId}:
    get:
      description: Get a location
      parameters:
        - in: path
          name: organizationId
          schema:
            type: string
      #          required: false
        - in: path
          name: locationId
          schema:
            type: string
      #          required: false
      responses:
        '200':
          description: Successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseOfOrganizationLocation'

  /organizations/{organizationId}/groups/public:
    get:
      description: Get organization groups
      parameters:
        - in: path
          name: organizationId
          schema:
            type: string
      #          required: false
      responses:
        '200':
          description: Successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseOfOrganizationGroups'

  /organizations/{organizationId}/groups:
    post:
      description: Add groups to an organization
      parameters:
        - in: path
          name: organizationId
          schema:
            type: string
      #          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/OrganizationGroup'
      responses:
        '200':
          description: Successfully added
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseOfOrganizationGroups'
    get:
      description: Get organization groups
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: organizationId
          schema:
            type: string
      #          required: false
      responses:
        '200':
          description: Successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseOfOrganizationGroups'
    put:
      description: Move users in between groups
      parameters:
        - in: path
          name: organizationId
          schema:
            type: string
      #          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationUsersGroupMoveOperationRequest'
      responses:
        '200':
          description: Successfully added
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseOfOrganizationGroups'

  /organizations/{organizationId}/stats:
    get:
      description: Get stats for one organization (admin access required)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: organizationId
          schema:
            type: string
      #          required: true
        - in: query
          name: groupId
          schema:
            type: string
        - in: query
          name: locationId
          schema:
            type: string

      responses:
        '200':
          description: Successfully compute the stats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseOfOrganizationStats'

  /organizations/{organizationId}/stats/orgwide:
    get:
      description: Get stats summary for one organization (admin access required)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: organizationId
          schema:
            type: string
              
      responses:
        '200':
          description: Successfully compute the stats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseOfOrganizationStats'

  /organizations/{organizationId}/groups/{groupId}/users:
    post:
      description: Add users to a group (admin access required)
      parameters:
        - in: path
          name: organizationId
          schema:
            type: string
      #          required: true
        - in: path
          name: groupId
          schema:
            type: string
      #          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                description: the user ids to add in the targeted group
      responses:
        '200':
          description: Successfully added
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Response'

  /organizations/{organizationId}/groups/zombie-users:
    delete:
      description: Remove dead users
      parameters:
        - in: path
          name: organizationId
          schema:
            type: string
      #          required: true
      responses:
        '200':
          description: Successfully added
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Response'

  /organizations/{organizationId}/groups/{groupId}/users/{userId}:
    delete:
      description: Take a user off a group (admin access required)
      parameters:
        - in: path
          name: organizationId
          schema:
            type: string
      #          required: true
        - in: path
          name: groupId
          schema:
            type: string
      #          required: true
        - in: path
          name: userId
          schema:
            type: string
      #          required: true
      responses:
        '200':
          description: Successfully removed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Response'

    put:
      description: Update a groupId for a user (admin access required)
      parameters:
        - in: path
          name: organizationId
          schema:
            type: string
      #          required: true
        - in: path
          name: groupId
          schema:
            type: string
      #          required: true
        - in: path
          name: userId
          schema:
            type: string
      #          required: true
        - in: query
          name: oldGroupId
          schema:
            type: string
          required: true

      responses:
        '200':
          description: Successfully removed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Response'

  /user/connect/add:
    post:
      description: Connect a user to an organization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationConnectionRequest'
      responses:
        '200':
          description: Successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfOrganizationConnection'

  /user/connect/{organizationId}/users/{userId}:
    get:
      description: Get info for a user
      parameters:
        - in: path
          name: organizationId
          schema:
            type: string
      #          required: true
        - in: path
          name: userId
          schema:
            type: string
      #          required: true
      responses:
        '200':
          description: Successfully returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Response'

  /user/connect/edit/{userId}:
    put:
      description: Update info for a user
      parameters:
        - in: path
          name: userId
          schema:
            type: string
      #          required: true

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEdit'

      responses:
        '200':
          description: Successfully removed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Response'

  /user/connect/locations:
    post:
      description: Find all the user's connected-organizations
      requestBody:
        content:
          application/json:
            schema:
              properties:
                userId:
                  type: string
              required:
                - userId
      responses:
        '200':
          description: Successfully found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfOrganizations'

  /admin/auth/signIn/request:
    post:
      description: Admin Auth Sign In Request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLinkRequestRequest'
      responses:
        '200':
          description: Successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  /admin/self:
    get:
      description: Authenticated Admin Profile
      responses:
        '200':
          description: The info requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminProfile'

  /admin/auth/signIn/process:
    post:
      description: Admin Auth Sign In Process
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLinkProcessRequest'
      responses:
        '200':
          description: Successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfAdminProfile'

  /internal/admin/operations/create:
    post:
      description: Internal Admin Approval Creation API
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InternalAdminApprovalCreateRequest'
      responses:
        '200':
          description: Successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'

  /internal/admin/operations/list:
    post:
      description: Internal Admin List API
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InternalAdminListRequest'
      responses:
        '200':
          description: Successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
