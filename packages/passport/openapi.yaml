openapi: 3.0.1
info:
  title: Passport API
  version: 1.0.0
components:
  securitySchemes:
    bearerAuthJWT:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Response:
      type: object
      additionalProperties: false
      properties:
        data:
          nullable: true
          type: object
        status:
          type: object
          additionalProperties: false
          properties:
            code:
              type: string
              enum:
                [
                  succeed,
                  failed,
                  validation_error,
                  internal_server_error,
                  unauthorized,
                  access_denied,
                  resource_not_found,
                ]
            message:
              nullable: true
              type: string

    Answer:
      type: array
      items:
        anyOf:
          - type: boolean
          - type: string
      minItems: 1
      maxItems: 2
      description: The first item in the array MUST be a boolean and the second item, if provided, MUST be a string.

    Passport:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
        statusToken:
          type: string
        status:
          type: string
          enum: [pending,proceed,caution,stop]
        validFrom:
          type: string
        validUntil:
          type: string
        userId:
          type: string
        includesGuardian:
          type: boolean
        dependantIds:
          type: array
          items:
            type: string

    ResponseOfPassport:
      type: object
      additionalProperties: false
      properties:
        data:
          $ref: '#/components/schemas/Passport'
        status:
          type: object
          additionalProperties: false
          properties:
            code:
              type: string
              enum:
                [
                  succeed,
                  failed,
                  validation_error,
                  internal_server_error,
                  unauthorized,
                  access_denied,
                  resource_not_found,
                ]
            message:
              nullable: true
              type: string

  responses:
    Response:
      description: Default Response wrapper
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
paths:
  /setTime:
    post:
      description: set the time on the server. Used in integration testing, and only works on local servers in guilible mode
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                  milliseconds:
                    type: number
      responses:
        '200':
          description: Successfully set

  /user/status/get:
    post:
      deprecated: true
      description: Get user's passport for the organization by statusToken or create a pending one if any. Not including userId is deprecated and will be removed
      requestBody:
        content:
          application/json:
            schema:
              properties:
                statusToken:
                  type: string
                  nullable: true
                userId:
                  type: string
                organizationId:
                  type: string
                dependantIds:
                  type: array
                  nullable: true
                  items:
                    type: string
                includeGuardian:
                  type: boolean
              required:
                - userId
                - includeGuardian

      responses:
        '200':
          description: Found or successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfPassport'

  /user/status/update:
    post:
      deprecated: true
      description: Solve badge status based on user's questionnaire answers. Not including userId is deprecated and will be removed
      requestBody:
        content:
          application/json:
            schema:
              properties:
                locationId:
                  type: string
                answers:
                  type: object
                  additionalProperties: true
                userId:
                  type: string
                questionnaireId:
                  type: string
                dependantIds:
                  type: array
                  items:
                    type: string
                includeGuardian:
                  type: boolean
              required:
                - locationId
                - answers
                - userId
                # - includeGuardian  # HOTFIX: remove it for now for < 1.4 apps
              example: {locationId: "location-id", answers: { "1":{"1": false},"2":{"1": false},"3":{"1": false},"4":{"1": false, "2": "2020-06-10T05:05:32.217Z"}}, userId: "parentId", dependantIds: ["childOne", "childTwo"]}

      responses:
        '200':
          description: Found or successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfPassport'

  /api/v1/status/get:
    post:
      description: Get user's passport for the organization by statusToken or create a pending one if any.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                statusToken:
                  type: string
                  nullable: true
                userId:
                  type: string
                organizationId:
                  type: string
                dependantIds:
                  type: array
                  nullable: true
                  items:
                    type: string
                includeGuardian:
                  type: boolean
              required:
                - userId
                - organizationId
                - includeGuardian

      responses:
        '200':
          description: Found or successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfPassport'

  /api/v1/status/update:
    post:
      description: Solve badge status based on user's questionnaire answers. Not including userId is deprecated and will be removed
      requestBody:
        content:
          application/json:
            schema:
              properties:
                locationId:
                  type: string
                answers:
                  type: object
                  additionalProperties: true
                userId:
                  type: string
                questionnaireId:
                  type: string
                dependantIds:
                  type: array
                  items:
                    type: string
                includeGuardian:
                  type: boolean
              required:
                - locationId
                - answers
                - userId
                - includeGuardian
              example: {locationId: "location-id", answers: { "1":{"1": false},"2":{"1": false},"3":{"1": false},"4":{"1": false, "2": "2020-06-10T05:05:32.217Z"}}, userId: "parentId", dependantIds: ["childOne", "childTwo"]}

      responses:
        '200':
          description: Found or successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfPassport'
  /user/testNotify:
    post:
      description: Send a notification to the user with the given userId. Used to check connectivity
      requestBody:
        content:
          application/json:
            schema:
              properties:
                userId:
                  type: string
                messageTitle:
                  type: string
                messageBody:
                  type: string
                link:
                  type: string
              required:
                - userId
                - messageTitle
                - messageBody
              additionalProperties: false

      responses:
        '200':
          description: Message sent to at least one token.
        '404':
          description: No Registrations with pushToken !== null exist for that user.

  /passport/api/v1/attestation:
    post:
      security:
        - bearerAuthJWT: []
      description: Update a list of users' statuses based on an attestation
      requestBody:
        content:
          application/json:
            schema:
              properties:
                organizationId:
                  type: string
                answers:
                  type: array
                  items:
                    $ref: '#/components/schemas/Answer'
                userIds:
                  type: array
                  items:
                    type: string
              required:
                - organizationId
                - answers
                - userIds

      responses:
        '200':
          description: Passports updated