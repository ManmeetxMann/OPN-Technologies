openapi: 3.0.1
info:
  title: Passport API
  version: 1.0.0
components:
  securitySchemes:
    bearerAuthJWT:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Response:
      type: object
      additionalProperties: false
      properties:
        data:
          nullable: true
          type: object
        status:
          type: object
          additionalProperties: false
          properties:
            code:
              type: string
              enum:
                [
                  succeed,
                  failed,
                  validation_error,
                  internal_server_error,
                  unauthorized,
                  access_denied,
                  resource_not_found,
                ]
            message:
              nullable: true
              type: string

    Answer:
      type: object
      properties:
        answer:
          type: boolean
        additionalValue:
          type: string
          nullable: true
        questionId:
          type: number

    User:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          nullable: true
        photo:
          type: string
          description: Photo URL
          nullable: true
        organizationIds:
          type: array
          items:
            type: string
        isAdminEnabled:
          type: boolean
        delegates:
          type: array
          items:
            type: string

    Passport:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
        statusToken:
          type: string
        status:
          type: string
          enum: [pending,proceed,caution,stop]
        validFrom:
          type: string
        validUntil:
          type: string
        userId:
          type: string
        includesGuardian:
          type: boolean
        dependantIds:
          type: array
          items:
            type: string

    Access:
      type: object
      additionalProperties: false
      properties:
        token:
          type: string
        statusToken:
          type: string
        userId:
          type: string
        locationId:
          type: string
        enteredAt:
          type: string
          nullable: true
        exitAt:
          type: string
          nullable: true
        includesGuardian:
          type: boolean
        dependants:
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              id:
                type: string
              enteredAt:
                type: string
                nullable: true
              exitAt:
                type: string
                nullable: true

    ResponseOfPassport:
      type: object
      additionalProperties: false
      properties:
        data:
          $ref: '#/components/schemas/Passport'
        status:
          type: object
          additionalProperties: false
          properties:
            code:
              type: string
              enum:
                [
                  succeed,
                  failed,
                  validation_error,
                  internal_server_error,
                  unauthorized,
                  access_denied,
                  resource_not_found,
                ]
            message:
              nullable: true
              type: string

    Attestation:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
        answers:
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              question:
                type: string
              boolean:
                type: boolean
              datetime:
                type: string
            required:
              - question
              - boolean
        locationId:
          type: string
        attestationTime:
          type: string
        status:
          type: string
          enum:
            - pending
            - proceed
            - caution
            - stop

    V1ResponseOfPassport:
      type: object
      additionalProperties: false
      properties:
        data:
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              user:
                $ref: '#/components/schemas/User'
              passport:
                $ref: '#/components/schemas/Passport'
        status:
          type: object
          additionalProperties: false
          properties:
            code:
              type: string
              enum:
                [
                  succeed,
                  failed,
                  validation_error,
                  internal_server_error,
                  unauthorized,
                  access_denied,
                  resource_not_found,
                ]
            message:
              nullable: true
              type: string

    V1ResponseOfAdminPassport:
      type: object
      additionalProperties: false
      properties:
        data:
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              user:
                $ref: '#/components/schemas/User'
              passport:
                $ref: '#/components/schemas/Passport'
              access:
                $ref: '#/components/schemas/Access'
        status:
          type: object
          additionalProperties: false
          properties:
            code:
              type: string
              enum:
                [
                  succeed,
                  failed,
                  validation_error,
                  internal_server_error,
                  unauthorized,
                  access_denied,
                  resource_not_found,
                ]
            message:
              nullable: true
              type: string

  responses:
    Response:
      description: Default Response wrapper
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
paths:
  /setTime:
    post:
      description: set the time on the server. Used in integration testing, and only works on local servers in guilible mode
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                  milliseconds:
                    type: number
      responses:
        '200':
          description: Successfully set

  /user/status/get:
    post:
      deprecated: true
      description: Get user's passport for the organization by statusToken or create a pending one if any. Not including userId is deprecated and will be removed
      requestBody:
        content:
          application/json:
            schema:
              properties:
                statusToken:
                  type: string
                  nullable: true
                userId:
                  type: string
                organizationId:
                  type: string
                dependantIds:
                  type: array
                  nullable: true
                  items:
                    type: string
                includeGuardian:
                  type: boolean
              required:
                - userId
                - includeGuardian

      responses:
        '200':
          description: Found or successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfPassport'

  /user/status/update:
    post:
      deprecated: true
      description: Solve badge status based on user's questionnaire answers. Not including userId is deprecated and will be removed
      requestBody:
        content:
          application/json:
            schema:
              properties:
                locationId:
                  type: string
                answers:
                  type: object
                  additionalProperties: true
                userId:
                  type: string
                questionnaireId:
                  type: string
                dependantIds:
                  type: array
                  items:
                    type: string
                includeGuardian:
                  type: boolean
              required:
                - locationId
                - answers
                - userId
                # - includeGuardian  # HOTFIX: remove it for now for < 1.4 apps
              example: {locationId: "location-id", answers: { "1":{"1": false},"2":{"1": false},"3":{"1": false},"4":{"1": false, "2": "2020-06-10T05:05:32.217Z"}}, userId: "parentId", dependantIds: ["childOne", "childTwo"]}

      responses:
        '200':
          description: Found or successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfPassport'

  /user/testNotify:
    post:
      description: Send a notification to the user with the given userId. Used to check connectivity
      requestBody:
        content:
          application/json:
            schema:
              properties:
                userId:
                  type: string
                messageTitle:
                  type: string
                messageBody:
                  type: string
                link:
                  type: string
              required:
                - userId
                - messageTitle
                - messageBody
              additionalProperties: false

      responses:
        '200':
          description: Message sent to at least one token.
        '404':
          description: No Registrations with pushToken !== null exist for that user.

  /passport/api/v1/attestation:
    post:
      security:
        - bearerAuthJWT: []
      description: Update a list of users' statuses based on an attestation
      requestBody:
        content:
          application/json:
            schema:
              properties:
                organizationId:
                  type: string
                answers:
                  type: array
                  items:
                    $ref: '#/components/schemas/Answer'
                userIds:
                  type: array
                  items:
                    type: string
              required:
                - organizationId
                - answers
                - userIds

      responses:
        '200':
          description: Passports updated

  /passport/api/v1/attestation/{attestationId}:
    get:
      security:
        - bearerAuthJWT: []
      parameters:
        - in: header
          name: organizationId
          schema:
            type: string
          required: true
        - in: path
          name: attestationId
          schema:
            type: string
          required: true
      description: Get attestation by ID

      responses:
        '200':
          description: Attestation available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attestation'

  /passport/api/v1/passport:
    get:
      security:
        - bearerAuthJWT: []
      parameters:
        - in: query
          name: organizationId
          schema:
            type: string
          required: true
      description: Get all active passports for the authenticated user and their dependants

      responses:
        '200':
          description: Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ResponseOfPassport'

  /passport/api/v1/admin/passport:
    get:
      security:
        - bearerAuthJWT: []
      parameters:
        - in: query
          name: organizationId
          schema:
            type: string
          required: true
        - in: query
          name: userIdId
          schema:
            type: string
          required: true
      description: Get active passport and access for the specified user, as well as info about that user

      responses:
        '200':
          description: Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1ResponseOfPassport'