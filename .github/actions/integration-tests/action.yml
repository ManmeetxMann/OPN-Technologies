name: 'Run integration tests'
inputs:
  node_version:
    description: 'Node version'
    required: false
    default: v12.18.4
  service_name:
    description: 'Service Name'
    required: true
    default: ""

  

runs:
  using: 'composite'
  steps:
  
  - name: Deploy Modules
    run: |
      echo "Service Name: ${{ inputs.service_name }}"
      echo "::group::Install npm modules"
      echo "Inside group"
      export NVM_DIR=~/.nvm
      source ~/.nvm/nvm.sh
      nvm install ${{ inputs.node_version }}
      nvm use ${{ inputs.node_version }}
      npm install
      npm run install-all
      pwd
      ls .prettierrc
      npm run lint-all

      cd services-v2
      npm install
      npm run lint
      echo "::endgroup::"
    shell: bash

  - name: Define Deployment Variables
    run: |
      echo "::group::Activate Service"
      cat >> service-account.json << EOF
      ${{ env.infra_dev_service_account }}
      EOF
      gcloud auth activate-service-account --key-file=./service-account.json --project=opn-platform-infra-dev
      rm ./service-account.json
      echo "::endgroup::"
      echo "::group::Add Application Environment Variables"
      echo "Writing Environment Variables to: .env"
      gcloud secrets versions access latest --secret=OPN_PLATFORM_CRDENTIALS > ./packages/common/.env
      gcloud secrets versions access latest --secret=OPN_PLATFORM_CRDENTIALS > ./services-v2/.env
      gcloud secrets versions access latest --secret=SERVICE_ACCOUNT > ./packages/common/service_account.json
      export GOOGLE_APPLICATION_CREDENTIALS=../../packages/common/service_account.json
      echo "::endgroup::"

      echo "::group::Test V1"
      npm run test-all
      echo "::endgroup::"

      echo "::group::Test V2"
      cd services-v2
      # Copy .env to dist folder
      npm run build:all
      # Activate service account with cloud SQL client role
      gcloud secrets versions access latest --secret=SERVICE_ACCOUNT > ./service_account.json
      export GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/service_account.json
      # Install SQL proxy
      wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
      chmod +x cloud_sql_proxy
      # TODO change to test all, after user tests update
      npm run test cart-service
      ./cloud_sql_proxy -instances=opn-platform-infra-dev:northamerica-northeast1:opn-platform-db-server-infra-dev:sql-inst=tcp:3306 \
       & npm run test cors
      echo "::endgroup::"

    shell: bash
